Q1: Which other xv6 system call(s) could be made faster using this shared page? Explain how. 

A1: None. Function getpid() could be accelerated by caching a copy of the process identifier on a page exposed to the user because it remains constant after initialized, for each process. Below lists system calls of xv6 which copies data from the kernel to the user buffer, where the information transferred varies between each invocation:
    wait: status varies
    pipe: file descriptors vary
    read: buffer content varies
    fstat: file state varies

Q2: Explain the output of vmprint in terms of Fig 3-4 from the text. What does page 0 contain? What is in page 2? When running in user mode, could the process read/write the memory mapped by page 1? What does the third to last page contain? 

A2: I also checked the output of the two commands to get the answer:
    linux> riscv64-linux-gnu-objdump -p user/_init
    
    user/_init:     file format elf64-littleriscv
    
    Program Header:
    0x70000003 off    0x0000000000000ab6 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**0
             filesz 0x0000000000000033 memsz 0x0000000000000000 flags r--
        LOAD off    0x00000000000000e8 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**3
             filesz 0x00000000000009a8 memsz 0x00000000000009c0 flags rwx
       STACK off    0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**4
             filesz 0x0000000000000000 memsz 0x0000000000000000 flags rw-
    
    linux> riscv64-linux-gnu-objdump -h user/_init
    
    user/_init:     file format elf64-littleriscv
    
    Sections:
    Idx Name          Size      VMA               LMA               File off  Algn
      0 .text         000008a2  0000000000000000  0000000000000000  000000e8  2**1
                      CONTENTS, ALLOC, LOAD, CODE
      1 .rodata       000000e9  00000000000008a8  00000000000008a8  00000990  2**3
                      CONTENTS, ALLOC, LOAD, READONLY, DATA
      2 .data         00000010  0000000000000998  0000000000000998  00000a80  2**3
                      CONTENTS, ALLOC, LOAD, DATA
                      CONTENTS, READONLY, DEBUGGING, OCTETS
    ... (more output less interesting omitted)

**************************************** MY RESULT GOES BELOW ****************************************

    page table 0x0000000087f6e000
     ..0: pte 0x0000000021fda801 pa 0x0000000087f6a000
     .. ..0: pte 0x0000000021fda401 pa 0x0000000087f69000
     .. .. ..0: pte 0x0000000021fdac1f pa 0x0000000087f6b000      # 0x0000: .text, .rotext, and .data (urwx)
     .. .. ..1: pte 0x0000000021fda00f pa 0x0000000087f68000      # 0x1000: guard page (rw, inaccessible to the user)
     .. .. ..2: pte 0x0000000021fd9c1f pa 0x0000000087f67000      # 0x2000: stack (urw)
     ..255: pte 0x0000000021fdb401 pa 0x0000000087f6d000
     .. ..511: pte 0x0000000021fdb001 pa 0x0000000087f6c000
     .. .. ..509: pte 0x0000000021fdd813 pa 0x0000000087f76000    # 0x7fffffd000: usyscall
     .. .. ..510: pte 0x0000000021fddc07 pa 0x0000000087f77000    # 0x7fffffe000: trapframe
     .. .. ..511: pte 0x0000000020001c0b pa 0x0000000080007000    # 0x7ffffff000: trampoline

**************************************** MY RESULT GOES ABOVE ****************************************

NOTE: I also use GDB to trace each physical address allocated. To achieve this, I run GDB with .gdbinit of xv6 enabled, inject a breakpoint before kalloc, continue the execution, and add a breakpoint before kfree on the first interrupt at kalloc. Then I know that:

    0x87fff000: the root page table of the kernel
    0x87ffe000: #0 second-level page table of the kernel
    0x87ffd000: #0#128 third-level page table of the kernel       # 0x0010000000: uart registers (1 page)
    0x87ffc000: #0#96 third-level page table of the kernel        # 0x000c000000: virtio mmio disk interface (512 pages)
    0x87ffb000: #0#97 third-level page table of the kernel        # 0x000c200000: virtio mmio disk interface
    0x87ffa000: #2 second-level page table of the kernel
    0x87ff9000: #2#0 third-level page table of the kernel         # 0x0080000000: kernel text (8 pages)
                                                                  # 0x0080008000: kernel data and PRAM free pages (32760 pages)
    0x87ff8000: #2#1 third-level page table of the kernel         # 0x0080200000: PRAM free pages
    0x87ff7000: #2#2 third-level page table of the kernel         # 0x0080400000: PRAM free pages
    ...
    0x87fba000: #2#63 third-level page table of the kernel        # 0x0087e00000: PRAM free pages
    0x87fb9000: #255 second-level page table of the kernel
    0x87fb8000: #255#511 third-level page table of the kernel     # 0x3ffffff000: trampoline (1 page)
    0x87fb7000: kernel stack of process 0
    0x87fb6000: kernel stack of process 1
    ...
    0x87f78000: kernel stack of process 63
   *0x87f77000: trapframe of process 0
   *0x87f76000: usyscall of process 0
    0x87f75000: the root page table of process 0
    0x87f74000: #255 second-level page table of process 0
    0x87f73000: #255#511 third-level page table of process 0      # 0x3ffffff000: trampoline (1 page)
    0x87f72000: mem of process 0
    0x87f71000: #0 second-level page table of process 0
    0x87f70000: #0#0 third-level page table of process 0          # 0x0000000000: mem (1 page)
    0x87f6f000: argv[0] [e]                                       # 0x0087f6f000: "/init" (1 page)
   *0x87f6e000: the root page table of process 0 [e]
   *0x87f6d000: #255 second-level page table of process 0 [e]
   *0x87f6c000: #255#511 third-level page table of process 0 [e]  # 0x3ffffff000: trampoline (1 page)
   *0x87f6b000: mem of process 0 [e]
   *0x87f6a000: #0 second-level page table of process 0 [e]
   *0x87f69000: #0#0 third-level page table of process 0          # 0x0000000000: mem (1 page)
   *0x87f68000: guard page of process 0 [e]
   *0x87f67000: stack of process 0 [e]
    0x87f72000: free (mem of process 0)
    0x87f70000: free (#0#0 third-level page table of process 0)
    0x87f71000: free (#0 third-level page table of process 0)
    0x87f73000: free (#255#511 third-level page table of process 0)
    0x87f74000: free (#255 second-level page table of process 0)
    0x87f75000: free (the root page table of process 0)
    0x87f6f000: free (argv[0] [e])

*   items relevant to the output of vmprint
[e] items created by procedure exec
